// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OAuthProfile {
  id                String      @id @default(cuid())
  userId            String
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  type              String
  provider          String
  providerOAuthId   String

  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?

  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerOAuthId])
}

model Session {
  id           String   @id @default(cuid())
  sid          String   @unique
  data         String
  expiresAt    DateTime
}

model User {
  id            String          @id @default(cuid())
  name          String?         @db.VarChar(255)
  email         String?   
  password      String?
  verified      Boolean?        @default(false)
  emailVerified DateTime?
  canLink       Boolean         @default(false)
  image         String?         @default("user_profilepic.png")
  role          RoleEnumType?   @default(user)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  authprofiles  OAuthProfile[]
  // sessions      Session[]
  
  @@unique([email])
}

enum RoleEnumType {
  user
  admin
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


//NFT Metadata
model Collection {
  id            String    @id @default(cuid())
  address       String
  name          String?
  type          String?
  tokens        Int
  owners        Int
  salesVolume   Decimal

  //Floor
  floor         Decimal?
  
  //Metadata
  description   String?
  bannerImg     String
  image         String
  extURL        String?

  //Ranking     
  ranking       RankTableEntry[]

  //Data
  data          DataPoint[]


  @@unique([address])
}

enum CollectionsRank {
  avgPrice      @map("avg_price")
  maxPrice      @map("max_price")
  salesCount    @map("sales_count")
  salesVolume   @map("sales_volume")
}

enum RankPeriod {
  oneDay      @map("1_DAY")
  sevenDays   @map("7_DAYS")
  thirtyDays  @map("30_DAYS")
  ninetyDays  @map("90_DAYS")
  oneYear     @map("365_DAYS")
  allTime     @map("ALL_TIME")
}

model RankTable {
  id            String            @id @default(cuid())
  type          CollectionsRank   
  timePeriod    RankPeriod
  entries       RankTableEntry[]

  @@unique([type, timePeriod])
}

model RankTableEntry {
  id            String            @id @default(cuid())
  value         Decimal
  tableId       String
  table         RankTable         @relation(fields: [tableId], references: [id], onDelete: Cascade)
  collectionId  String
  collection    Collection        @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([collectionId, tableId])
}

model DataPoint {
  id            String          @id @default(cuid())
  timestamp     DateTime      
  avgPrice      Decimal?
  maxPrice      Decimal?
  minPrice      Decimal?
  salesCount    BigInt?
  salesVolume   Decimal?
  tokensMinted  Decimal?
  tokensBurned  Decimal?
  totalMinted   Decimal?
  totalBurned   Decimal?
  ownersCount   BigInt?
  collectionId  String
  collection    Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([collectionId, timestamp])
}